version: "3.8"
services:
  config-server:
    image: "config-server"
    container_name: "config-server"
    environment:
      - THC_PATH=/actuator/health
      - THC_PORT=9095
    ports:
      - "19095:9095"
    healthcheck:
      test: [ "CMD", "/cnb/process/health-check" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  orders-service:
    image: "orders-service"
    container_name: "orders-service"
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
    ports:
      - "19092:9092"
    environment:
      - CONFIGSERVER_IMPORT=configserver:${CONFIG_SERVER_URL}
      - SPRING_CLOUD_CONFIG_FAIL_FAST=true
      - SPRING_PROFILES_ACTIVE=prod
      - DB_USER=${POSTGRES_DB_USER}
      - DB_PASSWORD=${POSTGRES_DB_PASSWORD}
      - DB_URL=${ORDERS_DB_URL}
      - FLYWAY_DB_URL=${ORDERS_DB_FLYWAY_URL}
      - MENU_SERVICE_URL=${MENU_SERVICE_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SCHEMA_REGISTRY_URL=${SCHEMA_REGISTRY_URL}

  dispatcher-service:
    image: "dispatcher-service"
    container_name: "dispatcher-service"
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "9096:9096"
    environment:
      - CONFIGSERVER_IMPORT=configserver:${CONFIG_SERVER_URL}
      - SPRING_CLOUD_CONFIG_FAIL_FAST=true
      - SPRING_PROFILES_ACTIVE=prod
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SCHEMA_REGISTRY_URL=${SCHEMA_REGISTRY_URL}

  menu-service:
    image: "menu-service"
    container_name: "menu-service"
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
    ports:
      - "19091:9091"
    environment:
      - CONFIGSERVER_IMPORT=configserver:${CONFIG_SERVER_URL}
      - SPRING_CLOUD_CONFIG_FAIL_FAST=true
      - SPRING_PROFILES_ACTIVE=prod
      - DB_USER=${POSTGRES_DB_USER}
      - DB_PASSWORD=${POSTGRES_DB_PASSWORD}
      - DB_URL=${MENU_DB_URL}

  postgres:
    image: "postgres:16.1"
    container_name: "postgres"
    ports:
      - "15432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_DB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWORD}
    volumes:
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d menu_service_db && pg_isready -d orders_service_db" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    command: >
      -c wal_level=logical
      -c max_wal_senders=1
      -c max_replication_slots=1

  kafka:
    image: confluentinc/cp-kafka:7.5.2
    hostname: kafka
    container_name: kafka
    ports:
      - "19097:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_INTERNAL_ADVERTISED_LISTENER},${KAFKA_EXTERNAL_ADVERTISED_LISTENER}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LISTENERS: ${KAFKA_INTERNAL_ADVERTISED_LISTENER},${KAFKA_CONTROLLER_LISTENER},${KAFKA_PLAINTEXT_LISTENER}
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: ${SCHEMA_REGISTRY_URL}
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
      CLUSTER_ID: X1oISRwqQ1yqeRlIjsegqQ
    volumes:
      - kafka-data:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "18081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      SCHEMA_REGISTRY_LISTENERS: ${SCHEMA_REGISTRY_LISTENERS}

  connect:
    image: confluentinc/cp-kafka-connect:7.5.2
    container_name: connect
    ports:
      - "18083:8083"
    depends_on:
      kafka:
        condition: service_started
      orders-service:
        condition: service_started
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      CONNECT_GROUP_ID: "debezium-cloudjava"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_TOPIC_CREATION_ENABLE: "true"

      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses

      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: ${SCHEMA_REGISTRY_URL}
      # CLASSPATH required due to CC-2422
      CLASSPATH: "/usr/share/java/monitoring-interceptors/monitoring-interceptors-7.6.0.jar"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/,/connectors/'
    volumes:
      - connect-data:/opt/docker/db/data
    command:
      - bash
      - -c
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.5.3
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run

volumes:
  db-data:
    driver: local
  kafka-data:
    driver: local
  connect-data:
    driver: local